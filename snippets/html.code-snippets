{
    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${2:boundedContextCamelCaseSingular}
    // ${4:moduleCamelCaseSingular}
	"Add grid elements manager component": {
		"prefix": "au-grid-elements-manager-component",
		"body": [
            "<!-- #region actions to manage ${2:objectCamelCasePlural} -->",
            "<au-grid-elements-manager",
            "\t*ngIf=\"currentViewAction.id ===  ${2:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.edit'\"",
            "\tclass=\"col-12 mt-7\"",
            "\t[columnsConfig]=\"${2:objectCamelCasePlural}ColumnsConfig$ | async\"",
            "\t[dialogTitle]=\"t('${2:boundedContextCamelCaseSingular}.${1/(.*)/${1:/capitalize}/}\"",
            "\t[gridData]=\"${2:objectCamelCasePlural}GridData$ | async\"",
            "\t[gridState]=\"${2:objectCamelCasePlural}GridState\"",
            "\t[id]=\"${2:objectCamelCasePlural}GridId\"",
            "\t[label]=\"t('${2:boundedContextCamelCaseSingular}.${2/(.*)/${1:/capitalize}/}')\"",
            "\t[originColumnsConfig]=\"origin${2/(.*)/${1:/capitalize}/}ColumnsConfig\"",
            "\t#${2:objectCamelCasePlural}GridElementsManager",
            ">",
            "\t<ng-template",
            "\t\tauGridCustomButtonsHeaderDialogTemplate",
            "\t>",
            "\t\t<button",
            "\t\t\tmat-flat-button",
            "\t\t\tclass=\"ml-2\"",
            "\t\t\ttype=\"button\"",
            "\t\t\t(click)=\"",
            "\t\t\t\tactionService.action({",
            "\t\t\t\t\tid          : '${2:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.new${1/(.*)/${1:/capitalize}/}',",
            "\t\t\t\t\tisViewAction: false",
            "\t\t\t\t})",
            "\t\t\t\"",
            "\t\t>",
            "\t\t\t<mat-icon class=\"mr-2\">add</mat-icon>",
            "\t\t\t{{ t('New.F') }}",
            "\t\t</button>",
            "",
            "\t</ng-template>",
            "",
            "\t<ng-template",
            "\t\tauGridFormElementDetailDialogTemplate",
            "\t\tlet-dialog",
            "\t>",
            "\t\t<form",
            "\t\t\tid=\"${1:objectCamelCaseSingular}DetailDialogForm\"",
            "\t\t\tnovalidate",
            "\t\t\t[formGroup]=\"${1:objectCamelCaseSingular}DialogFg\"",
            "\t\t\t(ngSubmit)=\"handleSubmit${1/(.*)/${1:/capitalize}/}Form($event, dialog)\"",
            "\t\t>",
            "\t\t\t<div class=\"layout__container\">",
            "\t\t\t\t<!-- define here the form of the entity to be managed -->",
            "\t\t\t</div>",
            "\t\t</form>",
            "",
            "\t\t<div class=\"flex justify-end\">",
            "\t\t\t<button",
            "\t\t\t\tmat-flat-button",
            "\t\t\t\tmat-dialog-close",
            "\t\t\t\tclass=\"ml-3\"",
            "\t\t\t\tcolor=\"basic\"",
            "\t\t\t>",
            "\t\t\t\t<mat-icon",
            "\t\t\t\t\tclass=\"icon-size-5 mr-2\"",
            "\t\t\t\t\tsvgIcon=\"heroicons_solid:x\"",
            "\t\t\t\t>",
            "\t\t\t\t</mat-icon>",
            "\t\t\t\t{{ t('Cancel') }}",
            "\t\t\t</button>",
            "\t\t\t<button",
            "\t\t\t\tmat-flat-button",
            "\t\t\t\tclass=\"ml-3\"",
            "\t\t\t\ttype=\"submit\"",
            "\t\t\t\tform=\"${1:objectCamelCaseSingular}DetailDialogForm\"",
            "\t\t\t\tcolor=\"accent\"",
            "\t\t\t\t[disabled]=\"${1:objectCamelCaseSingular}DialogFg.pristine\"",
            "\t\t\t>",
            "\t\t\t\t<mat-icon",
            "\t\t\t\t\tclass=\"icon-size-5 mr-2\"",
            "\t\t\t\t\tsvgIcon=\"heroicons_solid:pencil\"",
            "\t\t\t\t>",
            "\t\t\t\t</mat-icon>",
            "\t\t\t\t{{ t('Save') }}",
            "\t\t\t</button>",
            "\t\t</div>",
            "",
            "\t</ng-template>",
            "",
            "\t<au-grid-translations",
            "\t\t[actions]=\"t('Actions')\"",
            "\t\t[AND]=\"t('AND')\"",
            "\t\t[clearFilters]=\"t('ClearFilters')\"",
            "\t\t[clickAndDragInfo]=\"t('ClickAndDragInfo')\"",
            "\t\t[columns]=\"t('Columns')\"",
            "\t\t[field]=\"t('Field')\"",
            "\t\t[filter]=\"t('Filter')\"",
            "\t\t[for]=\"${2:objectCamelCasePlural}GridId\"",
            "\t\t[operator]=\"t('Operator')\"",
            "\t\t[OR]=\"t('OR')\"",
            "\t\t[pleaseSelectField]=\"t('PleaseSelectField')\"",
            "\t\t[resetColumnsConfig]=\"t('ResetColumnsConfig')\"",
            "\t\t[search]=\"t('Search')\"",
            "\t\t[translations]=\"t('Translations')\"",
            "\t\t[value]=\"t('Value')\"",
            "\t\t[noData]=\"t('NoData')\"",
            "\t\t[paginator]=\"{",
            "\t\t\tfirstPageLabel: t('Paginator.FirstPageLabel'),",
            "\t\t\titemsPerPageLabel: t('Paginator.ItemsPerPageLabel'),",
            "\t\t\tlastPageLabel: t('Paginator.LastPageLabel'),",
            "\t\t\tnextPageLabel: t('Paginator.NextPageLabel'),",
            "\t\t\tofLabel: t('Paginator.OfLabel'),",
            "\t\t\tpreviousPageLabel: t('Paginator.PreviousPageLabel')",
            "\t\t}\"",
            "\t\t[operators]=\"{",
            "\t\t\tcontains: t('Operators.Contains'),",
            "\t\t\tendsWith: t('Operators.EndsWith'),",
            "\t\t\tequals: t('Operators.Equals'),",
            "\t\t\tgreaterThan: t('Operators.GreaterThan'),",
            "\t\t\tgreaterThanEqual: t('Operators.GreaterThanEqual'),",
            "\t\t\tlessThan: t('Operators.LessThan'),",
            "\t\t\tlessThanEqual: t('Operators.LessThanEqual'),",
            "\t\t\tnotEquals: t('Operators.NotEquals'),",
            "\t\t\tstartsWith: t('Operators.StartsWith')",
            "\t\t}\"",
            "\t\t[actionsMenu]=\"{",
            "\t\t\tedit: t('Edit'),",
            "\t\t\tdelete: t('Delete'),",
            "\t\t\tcancel: t('Cancel')",
            "\t\t}\"",
            "\t>",
            "\t\t<au-grid-column-translation",
            "\t\t\t*ngFor=\"let columnConfig of origin${2/(.*)/${1:/capitalize}/}ColumnsConfig\"",
            "\t\t\t[field]=\"columnConfig.field\"",
            "\t\t>",
            "\t\t\t{{ t(columnConfig.translation ? columnConfig.translation : columnConfig.field.toPascalCase()) }}",
            "\t\t</au-grid-column-translation>",
            "\t</au-grid-translations>",
            "",
            "</au-grid-elements-manager>",
            "<!-- #endregion actions to manage ${2:objectCamelCasePlural} -->",
		],
		"description": "Create variables for grid elements manager"
	},

    // ${1:fieldCamelCaseSingular}
    // ${2:boundedContextCamelCaseSingular}
    // ${3:6}
    "Add material input text for Aurora": {
		"prefix": "au-input-text",
		"body": [
            "<mat-form-field",
            "\tappearance=\"outline\"",
            "\tclass=\"col-${3:6}\"",
            ">",
            "\t<mat-label>{{ t('${2:boundedContextCamelCaseSingular}.${1/(.*)/${1:/capitalize}/}') }}</mat-label>",
            "\t<input",
            "\t\tmatInput",
            "\t\tformControlName=\"${1:fieldCamelCaseSingular}\"",
            "\t>",
            "\t<mat-error>{{ formErrors?.${1:fieldCamelCaseSingular} | async }}</mat-error>",
            "</mat-form-field>",
        ],
		"description": "Add material input text for Aurora"
	},

    // ${1:fieldCamelCaseSingular}
    // ${2:boundedContextCamelCaseSingular}
    // ${3:3}
    "Add material datepicker for Aurora": {
		"prefix": "au-input-datepicker",
		"body": [
            "<mat-form-field",
            "\tappearance=\"outline\"",
            "\tclass=\"au-datepicker col-${3:3}\"",
            ">",
            "\t<mat-label>{{ t('${2:boundedContextCamelCaseSingular}.${1/(.*)/${1:/capitalize}/}') }}</mat-label>",
            "\t<input",
            "\t\tmatInput",
            "\t\tformControlName=\"${1:fieldCamelCaseSingular}\"",
            "\t\t[auDatepickerSqlFormat]",
            "\t\t[matDatepicker]=\"${1:fieldCamelCaseSingular}Picker\"",
            "\t>",
            "\t<mat-datepicker-toggle",
            "\t\tmatSuffix",
            "\t\t[for]=\"${1:fieldCamelCaseSingular}Picker\"",
            "\t>",
            "\t</mat-datepicker-toggle>",
            "\t<mat-datepicker #${1:fieldCamelCaseSingular}Picker>",
            "\t</mat-datepicker>",
            "\t<mat-error>{{ formErrors?.${1:fieldCamelCaseSingular} | async }}</mat-error>",
            "</mat-form-field>",
        ],
		"description": "Add material input datepicker for Aurora"
	},

    // ${1:fieldCamelCaseSingular}
    // ${2:boundedContextCamelCaseSingular}
    // ${3:3}
    "Add material datetimepicker for Aurora": {
		"prefix": "au-input-datetimepicker",
		"body": [
            "<mat-form-field",
            "\tappearance=\"outline\"",
            "\tclass=\"au-datepicker col-${3:3}\"",
            ">",
            "\t<mat-label>{{ t('${2:boundedContextCamelCaseSingular}.${1/(.*)/${1:/capitalize}/}') }}</mat-label>",
            "\t<input",
            "\t\tmatInput",
            "\t\tformControlName=\"${1:fieldCamelCaseSingular}\"",
            "\t\t[auDatetimepickerSqlFormat]",
            "\t\t[mtxDatetimepicker]=\"${1:fieldCamelCaseSingular}Picker\"",
            "\t>",
            "\t<mtx-datetimepicker-toggle",
            "\t\tmatSuffix",
            "\t\t[for]=\"${1:fieldCamelCaseSingular}Picker\"",
            "\t>",
            "\t</mtx-datetimepicker-toggle>",
            "\t<mtx-datetimepicker",
            "\t\t#${1:fieldCamelCaseSingular}Picker",
            "\t\ttype=\"datetime\"",
            "\t\tmode=\"landscape\"",
            "\t\tstartView=\"month\"",
            "\t\t[multiYearSelector]=\"false\"",
            "\t\t[twelvehour]=\"false\"",
            "\t\t[timeInterval]=\"1\"",
            "\t\t[touchUi]=\"false\"",
            "\t>",
            "\t</mtx-datetimepicker>",
            "\t<mat-error>{{ formErrors?.${1:fieldCamelCaseSingular} | async }}</mat-error>",
            "</mat-form-field>",
        ],
		"description": "Add material input datetimepicker for Aurora"
	},
}