{
    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${3:boundedContextCamelCaseSingular}
    // ${4:moduleCamelCaseSingular}
    "Add grid elements manager variables": {
		"prefix": "au-grid-elements-manager-variables",
        "description": "Add variables for grid elements manager",
		"body": [
            "/* #region variables to manage grid-elements-manager ${2:objectCamelCasePlural} */",
			"@ViewChild('${2:objectCamelCasePlural}GridElementsManager') ${2:objectCamelCasePlural}Component: GridElementsManagerComponent;",
			"${1:objectCamelCaseSingular}DialogFg: FormGroup;",
            "${1}GridId: string = '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.${1}GridList';",
            "${1}GridData$: Observable<GridData<${3/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}>>;",
            "${1}GridState: GridState = {};",
            "${1}ColumnsConfig$: Observable<ColumnConfig[]>;",
            "origin${2/(.*)/${1:/capitalize}/}ColumnsConfig: ColumnConfig[] = [",
            "\t{",
            "\t\ttype   : ColumnDataType.ACTIONS,",
            "\t\tfield  : 'Actions',",
            "\t\tsticky : true,",
            "\t\tactions: row =>",
            "\t\t{",
            "\t\t\tconst actions = [];",
            "",
            "\t\t\tactions.push({",
            "\t\t\t\tid          : '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.edit${1/(.*)/${1:/capitalize}/}',",
            "\t\t\t\tisViewAction: false,",
            "\t\t\t\ttranslation : 'edit',",
            "\t\t\t\ticon        : 'mode_edit',",
            "\t\t\t});",
            "",
            "\t\t\tactions.push({",
            "\t\t\t\tid          : '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.delete${1/(.*)/${1:/capitalize}/}',",
            "\t\t\t\tisViewAction: false,",
            "\t\t\t\ttranslation : 'delete',",
            "\t\t\t\ticon        : 'delete',",
            "\t\t\t});",
            "",
            "\t\t\treturn actions;",
            "\t\t},",
            "\t},",
            "\t...${1:objectCamelCaseSingular}ColumnsConfig,",
            "];",
            "/* #endregion variables to manage grid-elements-manager ${2:objectCamelCasePlural} */",
            "$7"
		],
	},

    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${3:boundedContextCamelCaseSingular}
    // ${4:moduleCamelCaseSingular}
    "Add grid elements manager methods": {
		"prefix": "au-grid-elements-manager-methods",
        "description": "Add variables for grid elements manager",
		"body": [
            "/* #region methods to manage ${2:objectCamelCasePlural} */",
			"create${2/(.*)/${1:/capitalize}/}DialogForm(): void",
			"{",
            "\tthis.${1:objectCamelCaseSingular}DialogFg = this.fb.group({",
            "\t\tid: '',",
            "\t\t// set here your form controls",
            "\t});",
            "}",
            "",
            "handleSubmit${1/(.*)/${1:/capitalize}/}Form($event, dialog): void",
            "{",
            "\t// manage validations before execute actions",
            "\tif (this.${1:objectCamelCaseSingular}DialogFg.invalid)",
            "\t{",
            "\t\tlog('[DEBUG] Error to validate form: ', this.${1:objectCamelCaseSingular}DialogFg);",
            "\t\tthis.validationMessagesService.validate();",
            "\t\treturn;",
            "\t}",
            "",
            "\t// depending on the dialog action we invoke a create${1/(.*)/${1:/capitalize}/} or update${1/(.*)/${1:/capitalize}/} action",
            "\tthis.actionService.action({",
            "\t\tid: mapActions(",
            "\t\t\tdialog.componentInstance.data.currentActionId,",
            "\t\t\t{",
            "\t\t\t\t'${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.new${1/(.*)/${1:/capitalize}/}' : '${4:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.create${1/(.*)/${1:/capitalize}/}',",
            "\t\t\t\t'${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.edit${1/(.*)/${1:/capitalize}/}': '${4:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.update${1/(.*)/${1:/capitalize}/}',",
            "\t\t\t},",
            "\t\t),",
            "\t\tisViewAction: false,",
            "\t});",
            "",
            "\tdialog.close();",
            "}",
            "/* #endregion methods to manage ${2:objectCamelCasePlural} */",
		],
	},

    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${3:boundedContextCamelCaseSingular}
    // ${4:moduleCamelCaseSingular}
    "Add grid elements manager actions": {
		"prefix": "au-grid-elements-manager-actions",
        "description": "Add actions for grid elements manager",
		"body": [
            "/* #region actions to manage ${2:objectCamelCasePlural} */",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}Pagination':",
            "\tawait lastValueFrom(",
            "\t\tthis.${1:objectCamelCaseSingular}Service",
            "\t\t\t.pagination({",
            "\t\t\t\tquery: action.data.query ?",
            "\t\t\t\t\taction.data.query :",
            "\t\t\t\t\tQueryStatementHandler",
            "\t\t\t\t\t\t.init({ columnsConfig: ${1:objectCamelCaseSingular}ColumnsConfig })",
            "\t\t\t\t\t\t.setColumFilters(this.gridFiltersStorageService.getColumnFilterState(this.${2:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.setSort(this.gridStateService.getSort(this.${2:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.setPage(this.gridStateService.getPage(this.${2:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.setSearch(this.gridStateService.getSearchState(this.${2:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.getQueryStatement(),",
            "\t\t\t\tconstraint: {",
            "\t\t\t\t\twhere: {",
            "\t\t\t\t\t\t${4:moduleCamelCaseSingular}Id: this.managedObject.id,",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t}),",
            "\t);",
            "\tbreak;",
            "",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.new${1/(.*)/${1:/capitalize}/}':",
            "\tthis.create${2/(.*)/${1:/capitalize}/}DialogForm();",
            "\tthis.${2:objectCamelCasePlural}Component.handleElementDetailDialog(action.id);",
            "\tthis.${1:objectCamelCaseSingular}DialogFg.get('id').setValue(Utils.uuid());",
            "\tthis.${1:objectCamelCaseSingular}DialogFg.get('${4:moduleCamelCaseSingular}Id').setValue(this.managedObject.id);",
            "\tbreak;",
            "",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.create${1/(.*)/${1:/capitalize}/}':",
            "\t// remove unnecessary controls here, before create ${1:objectCamelCaseSingular}",
            "",
            "\tawait lastValueFrom(",
            "\t\tthis.${1:objectCamelCaseSingular}Service",
            "\t\t\t.create<${3/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}>({",
            "\t\t\t\tobject: this.${1:objectCamelCaseSingular}DialogFg.value,",
            "\t\t\t}),",
            "\t);",
            "\tthis.actionService.action({",
            "\t\tid          : '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}Pagination',",
            "\t\tisViewAction: false,",
            "\t});",
            "\tbreak;",
            "",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.edit${1/(.*)/${1:/capitalize}/}':",
            "\tthis.create${2/(.*)/${1:/capitalize}/}DialogForm();",
            "\tawait lastValueFrom(",
            "\t\tthis.${1:objectCamelCaseSingular}Service",
            "\t\t\t.findById({",
            "\t\t\t\tid        : action.data.row.id,",
            "\t\t\t\tconstraint: {",
            "\t\t\t\t\twhere: {",
            "\t\t\t\t\t\t${4:moduleCamelCaseSingular}Id: this.managedObject.id,",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t}),",
            "\t);",
            "\tthis.${2:objectCamelCasePlural}Component.handleElementDetailDialog(action.id);",
            "\tbreak;",
            "",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.update${1/(.*)/${1:/capitalize}/}':",
            "\tthis.${1:objectCamelCaseSingular}DialogFg.removeControl('${4:moduleCamelCaseSingular}Id');",
            "",
            "\tawait lastValueFrom(",
            "\t\tthis.${1:objectCamelCaseSingular}Service",
            "\t\t\t.updateById<${3/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}>({",
            "\t\t\t\tobject: this.${1:objectCamelCaseSingular}DialogFg.value,",
            "\t\t\t}),",
            "\t);",
            "\tthis.actionService.action({",
            "\t\tid          : '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.${2:objectCamelCasePlural}Pagination',",
            "\t\tisViewAction: false,",
            "\t});",
            "\tbreak;",
            "",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.delete${1/(.*)/${1:/capitalize}/}':",
            "\tconst delete${1/(.*)/${1:/capitalize}/}DialogRef = this.confirmationService.open({",
            "\t\ttitle  : `${this.translocoService.translate('Delete')} ${this.translocoService.translate('${3:boundedContextCamelCaseSingular}.${1/(.*)/${1:/capitalize}/}')}`,",
            "\t\tmessage: this.translocoService.translate('DeletionWarning', { entity: this.translocoService.translate('${3:boundedContextCamelCaseSingular}.${1/(.*)/${1:/capitalize}/}') }),",
            "\t\ticon   : {",
            "\t\t\tshow : true,",
            "\t\t\tname : 'heroicons_outline:exclamation',",
            "\t\t\tcolor: 'warn',",
            "\t\t},",
            "\t\tactions: {",
            "\t\t\tconfirm: {",
            "\t\t\t\tshow : true,",
            "\t\t\t\tlabel: this.translocoService.translate('Remove'),",
            "\t\t\t\tcolor: 'warn',",
            "\t\t\t},",
            "\t\t\tcancel: {",
            "\t\t\t\tshow : true,",
            "\t\t\t\tlabel: this.translocoService.translate('Cancel'),",
            "\t\t\t},",
            "\t\t},",
            "\t\tdismissible: true,",
            "\t});",
            "",
            "\tdelete${1/(.*)/${1:/capitalize}/}DialogRef",
            "\t\t.afterClosed()",
            "\t\t.subscribe(async result =>",
            "\t\t{",
            "\t\t\tif (result === 'confirmed')",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\tawait lastValueFrom(",
            "\t\t\t\t\t\tthis.${1:objectCamelCaseSingular}Service",
            "\t\t\t\t\t\t\t.deleteById<${3/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}>(action.data.row.id),",
            "\t\t\t\t\t);",
            "",
            "\t\t\t\t\tthis.actionService.action({",
            "\t\t\t\t\t\tid          : '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}Pagination',",
            "\t\t\t\t\t\tisViewAction: false,",
            "\t\t\t\t\t});",
            "\t\t\t\t}",
            "\t\t\t\tcatch(error)",
            "\t\t\t\t{",
            "\t\t\t\t\tlog(`[DEBUG] Catch error in ${action.id} action: ${error}`);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t});",
            "\tbreak;",
            "",
            "case '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.export${2/(.*)/${1:/capitalize}/}':",
            "\tconst rows = await lastValueFrom(",
            "\t\tthis.${1:objectCamelCaseSingular}Service",
            "\t\t\t.get({",
            "\t\t\t\tquery     : action.data.query,",
            "\t\t\t\tconstraint: {",
            "\t\t\t\t\twhere: {",
            "\t\t\t\t\t\t${4:moduleCamelCaseSingular}Id: this.managedObject.id,",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t}),",
            "\t);",
            "",
            "\tconst columns: string[] = ${1:objectCamelCaseSingular}ColumnsConfig.map(${1:objectCamelCaseSingular}ColumnConfig => ${1:objectCamelCaseSingular}ColumnConfig.field);",
            "\tconst headers = columns.map(column => this.translocoService.translate('${3:boundedContextCamelCaseSingular}.' + column.toPascalCase()));",
            "",
            "\texportRows(",
            "\t\trows.objects,",
            "\t\t'${2:objectCamelCasePlural}.' + action.data.format,",
            "\t\tcolumns,",
            "\t\theaders,",
            "\t\taction.data.format,",
            "\t);",
            "\tbreak;",
            "/* #endregion actions to manage ${2:objectCamelCasePlural} */",
		],
	},

    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${3:boundedContextCamelCaseSingular}
    // ${4:moduleCamelCaseSingular}
    "Add findByIdWithRelations service method": {
		"prefix": "au-findByIdWithRelations-service",
        "description": "Add findByIdWithRelations method for service",
		"body": [
            "// to delete: *${2:objectCamelCasePlural}*",
            "findByIdWithRelations(",
            "\t{",
            "\t\tgraphqlStatement = findByIdWithRelationsQuery,",
            "\t\tid = '',",
            "\t\tconstraint = {},",
            "\t\tqueryPaginate${2/(.*)/${1:/capitalize}/} = {},",
            "\t\tconstraintPaginate${2/(.*)/${1:/capitalize}/} = {},",
            "\t}: {",
            "\t\tgraphqlStatement?: DocumentNode;",
            "\t\tid?: string;",
            "\t\tconstraint?: QueryStatement;",
            "\t\tqueryPaginate${2/(.*)/${1:/capitalize}/}?: QueryStatement;",
            "\t\tconstraintPaginate${2/(.*)/${1:/capitalize}/}?: QueryStatement;",
            "\t} = {},",
            "): Observable<{",
            "\tobject: ${4/(.*)/${1:/capitalize}/}${4/(.*)/${1:/capitalize}/};",
            "\t${3:boundedContextCamelCaseSingular}Paginate${2/(.*)/${1:/capitalize}/}: GridData<${4/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}>;",
            "}>",
            "{",
            "\treturn this.graphqlService",
            "\t\t.client()",
            "\t\t.watchQuery<{",
            "\t\t\tobject: ${4/(.*)/${1:/capitalize}/}${4/(.*)/${1:/capitalize}/};",
            "\t\t\t${3:boundedContextCamelCaseSingular}Paginate${2/(.*)/${1:/capitalize}/}: GridData<${4/(.*)/${1:/capitalize}/}${1/(.*)/${1:/capitalize}/}>;",
            "\t\t}>({",
            "\t\t\tquery    : parseGqlFields(graphqlStatement, fields, constraint),",
            "\t\t\tvariables: {",
            "\t\t\t\tid,",
            "\t\t\t\tconstraint,",
            "\t\t\t\tqueryPaginate${2/(.*)/${1:/capitalize}/},",
            "\t\t\t\tconstraintPaginate${2/(.*)/${1:/capitalize}/},",
            "\t\t\t},",
            "\t\t})",
            "\t\t.valueChanges",
            "\t\t.pipe(",
            "\t\t\tfirst(),",
            "\t\t\tmap(result => result.data),",
            "\t\t\ttap(data =>",
            "\t\t\t{",
            "\t\t\t\tthis.${4:moduleCamelCaseSingular}Subject$.next(data.object);",
            "\t\t\t\tthis.${1:objectCamelCaseSingular}Service.paginationSubject$.next(data.${3:boundedContextCamelCaseSingular}Paginate${2/(.*)/${1:/capitalize}/});",
            "\t\t\t}),",
            "\t\t);",
            "}",
		],
	},

    // ${1:objectPascalCasePlural}
    // ${2:boundedContextCamelCaseSingular}
    // ${3:modulePascalCaseSingular}
    "Add findByIdWithRelationsQuery graphql": {
		"prefix": "au-findByIdWithRelationsQuery-graphql",
        "description": "Add findByIdWithRelationsQuery for grid elements manager",
		"body": [
            "export const findByIdWithRelationsQuery = gql`",
            "\tquery ${2/(.*)/${1:/capitalize}/}Find${3:modulePascalCaseSingular}ById (",
            "\t\t\\$id: ID",
            "\t\t\\$constraint: QueryStatement",
            "\t\t\\$queryPaginate${1:objectPascalCasePlural}: QueryStatement",
            "\t\t\\$constraintPaginate${1:objectPascalCasePlural}: QueryStatement",
            "\t) {",
            "\t\tobject: ${2:boundedContextCamelCaseSingular}Find${3:modulePascalCaseSingular}ById (",
            "\t\t\tid: $id",
            "\t\t\tconstraint: $constraint",
            "\t\t) {",
            "\t\t\tid",
            "\t\t\t#FIELDS",
            "\t\t}",
            "\t\t${2:boundedContextCamelCaseSingular}Paginate${1:objectPascalCasePlural} (",
            "\t\t\tquery: \\$queryPaginate${1:objectPascalCasePlural}",
            "\t\t\tconstraint: \\$constraintPaginate${1:objectPascalCasePlural}",
            "\t\t) {",
            "\t\t\ttotal",
            "\t\t\trows",
            "\t\t\tcount",
            "\t\t}",
            "\t\t\\${relationsFields}",
            "\t}",
            "`;",
		],
	},

    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${3:boundedContextCamelCaseSingular}
    // ${4:moduleCamelCaseSingular}
    "Add findByIdWithRelations to edit resolver": {
		"prefix": "au-findByIdWithRelations-resolver",
        "description": "Add findByIdWithRelations for edit resolver",
		"body": [
            "// ${1:objectCamelCaseSingular}",
            "const ${2:objectCamelCasePlural}GridId = '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}GridList';",
            "this.gridStateService.setPaginationActionId(${2:objectCamelCasePlural}GridId, '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}Pagination');",
            "this.gridStateService.setExportActionId(${2:objectCamelCasePlural}GridId, '${3:boundedContextCamelCaseSingular}::${4:moduleCamelCaseSingular}.detail.export${3:objectPascalCasePlural}');",
            "",
            "return this.${4:moduleCamelCaseSingular}Service.findByIdWithRelations({",
            "\tid                      : route.paramMap.get('id'),",
            "\tqueryPaginate${2/(.*)/${1:/capitalize}/}: QueryStatementHandler",
            "\t\t.init({ columnsConfig: ${1:objectCamelCaseSingular}ColumnsConfig })",
            "\t\t.setColumFilters(this.gridFiltersStorageService.getColumnFilterState(${2:objectCamelCasePlural}GridId))",
            "\t\t.setSort(this.gridStateService.getSort(${2:objectCamelCasePlural}GridId))",
            "\t\t.setPage(this.gridStateService.getPage(${2:objectCamelCasePlural}GridId))",
            "\t\t.setSearch(this.gridStateService.getSearchState(${2:objectCamelCasePlural}GridId))",
            "\t\t.getQueryStatement(),",
            "\tconstraintPaginate${2/(.*)/${1:/capitalize}/}: {",
            "\t\twhere: {",
            "\t\t\t${4:moduleCamelCaseSingular}Id: route.paramMap.get('id'),",
            "\t\t},",
            "\t},",
            "});",
		],
	},

    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    "Add columns config, state and grid data form to init grid": {
        "prefix": "au-init-columns-config-state-data-grid",
        "description": "Add columns config, state and grid data form grid",
        "body": [
            "// ${2:objectCamelCasePlural} grid",
            "// to delete: *${1:objectCamelCaseSingular}*",
            "this.${2:objectCamelCasePlural}ColumnsConfig$ = this.gridColumnsConfigStorageService",
            "\t.getColumnsConfig(this.${2:objectCamelCasePlural}GridId, this.origin${1/(.*)/${1:/capitalize}/}ColumnsConfig)",
            "\t.pipe(takeUntil(this.unsubscribeAll$));",
            "",
            "this.${2:objectCamelCasePlural}GridState = {",
            "\tcolumnFilters: this.gridFiltersStorageService.getColumnFilterState(this.${2:objectCamelCasePlural}GridId),",
            "\tpage         : this.gridStateService.getPage(this.${2:objectCamelCasePlural}GridId),",
            "\tsort         : this.gridStateService.getSort(this.${2:objectCamelCasePlural}GridId),",
            "\tsearch       : this.gridStateService.getSearchState(this.${2:objectCamelCasePlural}GridId),",
            "};",
            "",
            "this.${2:objectCamelCasePlural}GridData$ = this.satellite${2/(.*)/${1:/capitalize}/}Service.pagination$;",
        ],
    },
}