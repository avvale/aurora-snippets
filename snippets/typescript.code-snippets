{
    // ${1:objectCamelCasePlural}
    // ${2:objectCamelCaseSingular}
    // ${3:objectPascalCaseSingular}
    // ${4:boundedContextCamelCaseSingular}
    // ${5:boundedContextPascalCaseSingular}
    // ${6:moduleCamelCaseSingular}
    "Add grid elements manager variables": {
		"prefix": "au-grid-elements-manager-variables",
		"body": [
            "/* #region variables to manage grid-elements-manager ${1:objectCamelCasePlural} */",
			"@ViewChild('${1:objectCamelCasePlural}GridElementsManager') ${1:objectCamelCasePlural}Component: GridElementsManagerComponent;",
			"${2:objectCamelCaseSingular}DialogFg: FormGroup;",
            "${1}GridId: string = '${4:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.${1}GridList';",
            "${1}GridData$: Observable<GridData<${5:boundedContextPascalCaseSingular}${3:objectPascalCaseSingular}>>;",
            "${1}GridState: GridState = {};",
            "${1}ColumnsConfig$: Observable<ColumnConfig[]>;",
            "originLoadOrdersColumnsConfig: ColumnConfig[] = [",
            "\t{",
            "\t\ttype   : ColumnDataType.ACTIONS,",
            "\t\tfield  : 'Actions',",
            "\t\tsticky : true,",
            "\t\tactions: row =>",
            "\t\t{",
            "\t\t\tconst actions = [];",
            "",
            "\t\t\tactions.push({",
            "\t\t\t\tid          : '${4:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.edit${3:objectPascalCaseSingular}',",
            "\t\t\t\tisViewAction: false,",
            "\t\t\t\ttranslation : 'edit',",
            "\t\t\t\ticon        : 'mode_edit',",
            "\t\t\t});",
            "",
            "\t\t\tactions.push({",
            "\t\t\t\tid          : '${4:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.delete${3:objectPascalCaseSingular}',",
            "\t\t\t\tisViewAction: false,",
            "\t\t\t\ttranslation : 'delete',",
            "\t\t\t\ticon        : 'delete',",
            "\t\t\t});",
            "",
            "\t\t\treturn actions;",
            "\t\t},",
            "\t},",
            "\t...${2:objectCamelCaseSingular}ColumnsConfig,",
            "];",
            "/* #endregion variables to manage grid-elements-manager ${1:objectCamelCasePlural} */",
            "$7"
		],
		"description": "Add variables for grid elements manager"
	},

    // ${1:objectCamelCasePlural}
    // ${2:objectCamelCaseSingular}
    // ${3:objectPascalCasePlural}
    // ${4:objectPascalCaseSingular}
    // ${5:boundedContextCamelCaseSingular}
    // ${6:moduleCamelCaseSingular}
    "Add grid elements manager methods": {
		"prefix": "au-grid-elements-manager-methods",
		"body": [
            "/* #region methods to manage ${1:objectCamelCasePlural} */",
			"create${3:objectPascalCasePlural}DialogForm(): void",
			"{",
            "\tthis.${2:objectCamelCaseSingular}DialogFg = this.fb.group({",
            "\t\tid: '',",
            "\t\t// set here your form controls",
            "\t});",
            "}",
            "",
            "handleSubmit${4:objectPascalCaseSingular}Form($event, dialog): void",
            "{",
            "\t// manage validations before execute actions",
            "\tif (this.${2:objectCamelCaseSingular}DialogFg.invalid)",
            "\t{",
            "\t\tlog('[DEBUG] Error to validate form: ', this.${2:objectCamelCaseSingular}DialogFg);",
            "\t\tthis.validationMessagesService.validate();",
            "\t\treturn;",
            "\t}",
            "",
            "\t// depending on the dialog action we invoke a create{4:objectPascalCaseSingular} or update{4:objectPascalCaseSingular} action",
            "\tthis.actionService.action({",
            "\t\tid: mapActions(",
            "\t\t\tdialog.componentInstance.data.currentActionId,",
            "\t\t\t{",
            "\t\t\t\t'${5:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.new{4:objectPascalCaseSingular}' : '${4:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.create{4:objectPascalCaseSingular}',",
            "\t\t\t\t'${5:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.edit{4:objectPascalCaseSingular}' : '${4:boundedContextCamelCaseSingular}::${6:moduleCamelCaseSingular}.detail.update{4:objectPascalCaseSingular}',",
            "\t\t\t},",
            "\t\t),",
            "\t\tisViewAction: false,",
            "\t});",
            "",
            "\tdialog.close();",
            "}",
            "/* #endregion methods to manage ${1:objectCamelCasePlural} */",
		],
		"description": "Add variables for grid elements manager"
	},

    // ${1:objectCamelCasePlural}
    // ${2:objectCamelCaseSingular}
    // ${3:objectPascalCasePlural}
    // ${4:objectPascalCaseSingular}
    // ${5:boundedContextCamelCaseSingular}
    // ${6:boundedContextPascalCaseSingular}
    // ${7:moduleCamelCaseSingular}
    "Add grid elements manager actions": {
		"prefix": "au-grid-elements-manager-actions",
		"body": [
            "/* #region actions to manage ${1:objectCamelCasePlural} */",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.${1:objectCamelCasePlural}Pagination':",
            "\tawait lastValueFrom(",
            "\t\tthis.${2:objectCamelCaseSingular}Service",
            "\t\t\t.pagination({",
            "\t\t\t\tquery: action.data.query ?",
            "\t\t\t\t\taction.data.query :",
            "\t\t\t\t\tQueryStatementHandler",
            "\t\t\t\t\t\t.init({ columnsConfig: ${2:objectCamelCaseSingular}ColumnsConfig })",
            "\t\t\t\t\t\t.setColumFilters(this.gridFiltersStorageService.getColumnFilterState(this.${1:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.setSort(this.gridStateService.getSort(this.${1:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.setPage(this.gridStateService.getPage(this.${1:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.setSearch(this.gridStateService.getSearchState(this.${1:objectCamelCasePlural}GridId))",
            "\t\t\t\t\t\t.getQueryStatement(),",
            "\t\t\t\tconstraint: {",
            "\t\t\t\t\twhere: {",
            "\t\t\t\t\t\t${7:moduleCamelCaseSingular}Id: this.managedObject.id,",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t}),",
            "\t);",
            "\tbreak;",
            "",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.new${4:objectPascalCaseSingular}':",
            "\tthis.create${3:objectPascalCasePlural}DialogForm();",
            "\tthis.${1:objectCamelCasePlural}Component.handleElementDetailDialog(action.id);",
            "\tthis.${2:objectCamelCaseSingular}DialogFg.get('id').setValue(Utils.uuid());",
            "\tthis.${2:objectCamelCaseSingular}DialogFg.get('${7:moduleCamelCaseSingular}Id').setValue(this.managedObject.id);",
            "\tbreak;",
            "",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.create${4:objectPascalCaseSingular}':",
            "\t// remove unnecessary controls here, before create ${2:objectCamelCaseSingular}",
            "",
            "\tawait lastValueFrom(",
            "\t\tthis.${2:objectCamelCaseSingular}Service",
            "\t\t\t.create<${6:boundedContextPascalCaseSingular}${4:objectPascalCaseSingular}>({",
            "\t\t\t\tobject: this.${2:objectCamelCaseSingular}DialogFg.value,",
            "\t\t\t}),",
            "\t);",
            "\tthis.actionService.action({",
            "\t\tid          : '${7:moduleCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.${1:objectCamelCasePlural}Pagination',",
            "\t\tisViewAction: false,",
            "\t});",
            "\tbreak;",
            "",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.edit${4:objectPascalCaseSingular}':",
            "\tthis.create${3:objectPascalCasePlural}DialogForm();",
            "\tawait lastValueFrom(",
            "\t\tthis.${2:objectCamelCaseSingular}Service",
            "\t\t\t.findById({",
            "\t\t\t\tid        : action.data.row.id,",
            "\t\t\t\tconstraint: {",
            "\t\t\t\t\twhere: {",
            "\t\t\t\t\t\t${7:moduleCamelCaseSingular}Id: this.managedObject.id,",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t}),",
            "\t);",
            "\tthis.${1:objectCamelCasePlural}Component.handleElementDetailDialog(action.id);",
            "\tbreak;",
            "",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.update${4:objectPascalCaseSingular}':",
            "\tthis.${2:objectCamelCaseSingular}DialogFg.removeControl('${7:moduleCamelCaseSingular}Id');",
            "",
            "\tawait lastValueFrom(",
            "\t\tthis.${2:objectCamelCaseSingular}Service",
            "\t\t\t.updateById<${6:boundedContextPascalCaseSingular}${4:objectPascalCaseSingular}>({",
            "\t\t\t\tobject: this.${2:objectCamelCaseSingular}DialogFg.value,",
            "\t\t\t}),",
            "\t);",
            "\tthis.actionService.action({",
            "\t\tid          : '${7:moduleCamelCaseSingular}::${7:moduleCamelCaseSingular}.${1:objectCamelCasePlural}Pagination',",
            "\t\tisViewAction: false,",
            "\t});",
            "\tbreak;",
            "",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.delete${4:objectPascalCaseSingular}':",
            "\tconst delete${4:objectPascalCaseSingular}DialogRef = this.confirmationService.open({",
            "\t\ttitle  : `${this.translocoService.translate('Delete')} ${this.translocoService.translate('${5:boundedContextCamelCaseSingular}.${4:objectPascalCaseSingular}')}`,",
            "\t\tmessage: this.translocoService.translate('DeletionWarning', { entity: this.translocoService.translate('${5:boundedContextCamelCaseSingular}.${4:objectPascalCaseSingular}') }),",
            "\t\ticon   : {",
            "\t\t\tshow : true,",
            "\t\t\tname : 'heroicons_outline:exclamation',",
            "\t\t\tcolor: 'warn',",
            "\t\t},",
            "\t\tactions: {",
            "\t\t\tconfirm: {",
            "\t\t\t\tshow : true,",
            "\t\t\t\tlabel: this.translocoService.translate('Remove')",
            "\t\t\t\tcolor: 'warn',",
            "\t\t\t},",
            "\t\t\tactions: {",
            "\t\t\t\tconfirm: {",
            "\t\t\t\t\tshow : true,",
            "\t\t\t\t\tlabel: this.translocoService.translate('Remove'),",
            "\t\t\t\t\tcolor: 'warn',",
            "\t\t\t\t},",
            "\t\t\t\tcancel: {",
            "\t\t\t\t\tshow : true,",
            "\t\t\t\t\tlabel: this.translocoService.translate('Cancel'),",
            "\t\t\t\t},",
            "\t\t\t},",
            "\t\t\tdismissible: true,",
            "\t\t});",
            "",
            "\tdelete${4:objectPascalCaseSingular}DialogRef",
            "\t\t.afterClosed()",
            "\t\t.subscribe(async result =>",
            "\t\t{",
            "\t\t\tif (result === 'confirmed')",
            "\t\t\t{",
            "\t\t\t\ttry",
            "\t\t\t\t{",
            "\t\t\t\t\tawait lastValueFrom(",
            "\t\t\t\t\t\tthis.${2:objectCamelCaseSingular}Service",
            "\t\t\t\t\t\t\t.deleteById<${6:boundedContextPascalCaseSingular}${4:objectPascalCaseSingular}>(action.data.row.id),",
            "\t\t\t\t\t);",
            "",
            "\t\t\t\t\tthis.actionService.action({",
            "\t\t\t\t\t\tid          : '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.${1:objectCamelCasePlural}Pagination',",
            "\t\t\t\t\t\tisViewAction: false,",
            "\t\t\t\t\t});",
            "\t\t\t\t}",
            "\t\t\t\tcatch(error)",
            "\t\t\t\t{",
            "\t\t\t\t\tlog(`[DEBUG] Catch error in ${action.id} action: ${error}`);",
            "\t\t\t\t}",
            "\t\t\t}",
            "\t\t});",
            "\tbreak;",
            "",
            "case '${5:boundedContextCamelCaseSingular}::${7:moduleCamelCaseSingular}.detail.export${3:objectPascalCasePlural}':",
            "\tconst rows = await lastValueFrom(",
            "\t\tthis.${2:objectCamelCaseSingular}Service",
            "\t\t\t.get({",
            "\t\t\t\tquery     : action.data.query,",
            "\t\t\t\tconstraint: {",
            "\t\t\t\t\twhere: {",
            "\t\t\t\t\t\t${7:moduleCamelCaseSingular}Id: this.managedObject.id,",
            "\t\t\t\t\t},",
            "\t\t\t\t},",
            "\t\t\t}),",
            "\t);",
            "",
            "\tconst columns: string[] = ${2:objectCamelCaseSingular}ColumnsConfig.map(${2:objectCamelCaseSingular}ColumnConfig => ${2:objectCamelCaseSingular}ColumnConfig.field);",
            "\tconst headers = columns.map(column => this.translocoService.translate('${5:boundedContextCamelCaseSingular}.' + column.toPascalCase()));",
            "",
            "\texportRows(",
            "\t\trows.objects,",
            "\t\t'${1:objectCamelCasePlural}.' + action.data.format,",
            "\t\tcolumns,",
            "\t\theaders,",
            "\t\taction.data.format,",
            "\t);",
            "\tbreak;",
            "/* #endregion actions to manage ${1:objectCamelCasePlural} */",
		],
		"description": "Add variables for grid elements manager"
	},

    // ${1:objectCamelCaseSingular}
    // ${2:objectPascalCasePlural}
    // ${3:objectPascalCaseSingular}
    // ${4:boundedContextCamelCaseSingular}
    // ${5:boundedContextPascalCaseSingular}
    // ${6:moduleCamelCaseSingular}
    // ${7:modulePascalCaseSingular}
    "Add findByIdWithRelations service method": {
		"prefix": "au-findByIdWithRelations-service",
		"body": [
            "findByIdWithRelations(",
            "\t{",
            "\t\tgraphqlStatement = findByIdWithRelationsQuery,",
            "\t\tid = '',",
            "\t\tconstraint = {},",
            "\t\tqueryPaginate${2:objectPascalCasePlural} = {},",
            "\t\tconstraintPaginate${2:objectPascalCasePlural} = {},",
            "\t}: {",
            "\t\tgraphqlStatement?: DocumentNode;",
            "\t\tid?: string;",
            "\t\tconstraint?: QueryStatement;",
            "\t\tqueryPaginate${2:objectPascalCasePlural}?: QueryStatement;",
            "\t\tconstraintPaginate${2:objectPascalCasePlural}?: QueryStatement;",
            "\t} = {},",
            "): Observable<{",
            "\tobject: ${5:boundedContextPascalCaseSingular}${7:modulePascalCaseSingular};",
            "\t${4:boundedContextCamelCaseSingular}Paginate${2:objectPascalCasePlural}: GridData<${5:boundedContextPascalCaseSingular}${3:objectPascalCaseSingular}>;",
            "}>",
            "{",
            "\treturn this.graphqlService",
            "\t\t.client()",
            "\t\t.watchQuery<{",
            "\t\t\tobject: ${5:boundedContextPascalCaseSingular}${7:modulePascalCaseSingular};",
            "\t\t\t${4:boundedContextCamelCaseSingular}Paginate${2:objectPascalCasePlural}: GridData<${5:boundedContextPascalCaseSingular}${3:objectPascalCaseSingular}>;",
            "\t\t}>({",
            "\t\t\tquery    : parseGqlFields(graphqlStatement, fields, constraint),",
            "\t\t\tvariables: {",
            "\t\t\t\tid,",
            "\t\t\t\tconstraint,",
            "\t\t\t\tqueryPaginate${2:objectPascalCasePlural},",
            "\t\t\t\tconstraintPaginate${2:objectPascalCasePlural},",
            "\t\t\t},",
            "\t\t})",
            "\t\t.valueChanges",
            "\t\t.pipe(",
            "\t\t\tfirst(),",
            "\t\t\tmap(result => result.data),",
            "\t\t\ttap(data =>",
            "\t\t\t{",
            "\t\t\t\tthis.${6:moduleCamelCaseSingular}Subject$.next(data.object);",
            "\t\t\t\tthis.${1:objectCamelCaseSingular}Service.paginationSubject$.next(data.${4:boundedContextCamelCaseSingular}Paginate${2:objectPascalCasePlural});",
            "\t\t\t}),",
            "\t\t);",
            "}",
		],
		"description": "Add findByIdWithRelations method for service"
	},

    // ${1:objectPascalCasePlural}
    // ${2:boundedContextCamelCaseSingular}
    // ${3:boundedContextPascalCaseSingular}
    // ${4:modulePascalCaseSingular}
    "Add findByIdWithRelationsQuery graphql": {
		"prefix": "au-findByIdWithRelationsQuery-graphql",
		"body": [
            "export const findByIdWithRelationsQuery = gql`",
            "\tquery ${3:boundedContextPascalCaseSingular}Find${4:modulePascalCaseSingular}ById (",
            "\t\t$id: ID",
            "\t\t$constraint: QueryStatement",
            "\t\t$queryPaginate${1:objectPascalCasePlural}: QueryStatement",
            "\t\t$constraintPaginate${1:objectPascalCasePlural}: QueryStatement",
            "\t) {",
            "\t\tobject: ${2:boundedContextCamelCaseSingular}Find${4:modulePascalCaseSingular}ById (",
            "\t\t\tid: $id",
            "\t\t\tconstraint: $constraint",
            "\t\t) {",
            "\t\t\tid",
            "\t\t\t#FIELDS",
            "\t\t}",
            "\t\t${2:boundedContextCamelCaseSingular}Paginate${1:objectPascalCasePlural} (",
            "\t\t\tquery: $queryPaginate${1:objectPascalCasePlural}",
            "\t\t\tconstraint: $constraintPaginate${1:objectPascalCasePlural}",
            "\t\t) {",
            "\t\t\ttotal",
            "\t\t\trows",
            "\t\t\tcount",
            "\t\t}",
            "\t\t${relationsFields}",
            "\t}",
            "`;",
		],
		"description": "Add findByIdWithRelationsQuery for grid elements manager"
	},


    // ${1:objectCamelCaseSingular}
    // ${2:objectCamelCasePlural}
    // ${3:objectPascalCasePlural}
    // ${4:boundedContextCamelCaseSingular}
    // ${5:moduleCamelCaseSingular}
    "Add findByIdWithRelations to edit resolver": {
		"prefix": "au-findByIdWithRelations-resolver",
		"body": [
            "// ${1:objectCamelCaseSingular}",
            "const ${2:objectCamelCasePlural}GridId = '${4:boundedContextCamelCaseSingular}::${5:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}GridList';",
            "this.gridStateService.setPaginationActionId(${2:objectCamelCasePlural}GridId, '${4:boundedContextCamelCaseSingular}::${5:moduleCamelCaseSingular}.detail.${2:objectCamelCasePlural}Pagination');",
            "this.gridStateService.setExportActionId(${2:objectCamelCasePlural}GridId, '${4:boundedContextCamelCaseSingular}::${5:moduleCamelCaseSingular}.detail.export${3:objectPascalCasePlural}');",
            "",
            "return this.${5:moduleCamelCaseSingular}Service.findByIdWithRelations({",
            "\tid                      : route.paramMap.get('id'),",
            "\tqueryPaginate${3:objectPascalCasePlural}: QueryStatementHandler",
            "\t\t.init({ columnsConfig: ${1:objectCamelCaseSingular}ColumnsConfig })",
            "\t\t.setColumFilters(this.gridFiltersStorageService.getColumnFilterState(${2:objectCamelCasePlural}GridId))",
            "\t\t.setSort(this.gridStateService.getSort(${2:objectCamelCasePlural}GridId))",
            "\t\t.setPage(this.gridStateService.getPage(${2:objectCamelCasePlural}GridId))",
            "\t\t.setSearch(this.gridStateService.getSearchState(${2:objectCamelCasePlural}GridId))",
            "\t\t.getQueryStatement(),",
            "\tconstraintPaginate${3:objectPascalCasePlural}: {",
            "\t\twhere: {",
            "\t\t\t${5:moduleCamelCaseSingular}Id: route.paramMap.get('id'),",
            "\t\t},",
            "\t},",
            "});",
		],
		"description": "Add findByIdWithRelations for resolver"
	},
}